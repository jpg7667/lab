// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Abstract contract for 3D objects
abstract contract ThreeDObject {
    // Abstract functions for surface area and volume
    function surfaceArea() public view virtual returns (uint256);
    function volume() public view virtual returns (uint256);
}

// Box contract
contract Box is ThreeDObject {
    uint256 width;
    uint256 height;
    uint256 depth;

    // Constructor to initialize dimensions of the box
    constructor(uint256 _width, uint256 _height, uint256 _depth) {
        width = _width;
        height = _height;
        depth = _depth;
    }

    // Override surface area function for box
    function surfaceArea() public view override returns (uint256) {
        return 2 * (width * height + height * depth + depth * width);
    }

    // Override volume function for box
    function volume() public view override returns (uint256) {
        return width * height * depth;
    }
}

// Cube contract
contract Cube is ThreeDObject {
    uint256 side;

    // Constructor to initialize side length of the cube
    constructor(uint256 _side) {
        side = _side;
    }

    // Override surface area function for cube
    function surfaceArea() public view override returns (uint256) {
        return 6 * side * side;
    }

    // Override volume function for cube
    function volume() public view override returns (uint256) {
        return side * side * side;
    }
}

// Cylinder contract
contract Cylinder is ThreeDObject {
    uint256 radius;
    uint256 height;

    // Constructor to initialize radius and height of the cylinder
    constructor(uint256 _radius, uint256 _height) {
        radius = _radius;
        height = _height;
    }

    // Override surface area function for cylinder
    function surfaceArea() public view override returns (uint256) {
        uint256 pi = 31415;  // Pi value as 31415 (3.1415 * 10000 for precision)
        uint256 factor = 10000;  // Factor to preserve precision (scale factor)
        uint256 area = (2 * pi * radius * (radius + height)) / factor;
        return area;
    }

    // Override volume function for cylinder
    function volume() public view override returns (uint256) {
        uint256 pi = 31415;  // Pi value as 31415 (3.1415 * 10000 for precision)
        uint256 factor = 10000;  // Factor to preserve precision (scale factor)
        uint256 vol = (pi * radius * radius * height) / factor;
        return vol;
    }
}

// Cone contract
contract Cone is ThreeDObject {
    uint256 radius;
    uint256 height;

    // Constructor to initialize radius and height of the cone
    constructor(uint256 _radius, uint256 _height) {
        radius = _radius;
        height = _height;
    }

    // Override surface area function for cone
    function surfaceArea() public view override returns (uint256) {
        uint256 pi = 31415;  // Pi value as 31415 (3.1415 * 10000 for precision)
        uint256 factor = 10000;  // Factor to preserve precision (scale factor)
        uint256 slantHeight = sqrt(radius * radius + height * height);
        uint256 area = pi * radius * (radius + slantHeight) / factor;
        return area;
    }

    // Override volume function for cone
    function volume() public view override returns (uint256) {
        uint256 pi = 31415;  // Pi value as 31415 (3.1415 * 10000 for precision)
        uint256 factor = 10000;  // Factor to preserve precision (scale factor)
        uint256 vol = (pi * radius * radius * height) / (3 * factor);
        return vol;
    }

    // Function to calculate square root of a number (used for slant height)
    function sqrt(uint256 x) internal pure returns (uint256) {
        uint256 z = (x + 1) / 2;
        uint256 y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
        return y;
    }
}

