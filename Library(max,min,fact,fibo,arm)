// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

library MathLibrary {
    function max(uint a, uint b) internal pure returns (uint) {
        return a > b ? a : b;
    }

    function min(uint a, uint b) internal pure returns (uint) {
        return a < b ? a : b;
    }

    function factorial(uint n) internal pure returns (uint) {
        require(n >= 0, "Input must be non-negative");
        uint result = 1;
        for (uint i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }

    function fibonacci(uint n) internal pure returns (uint[] memory) {
        uint[] memory fib = new uint[](n);
        if (n > 0) fib[0] = 0;
        if (n > 1) fib[1] = 1;

        for (uint i = 2; i < n; i++) {
            fib[i] = fib[i - 1] + fib[i - 2];
        }
        return fib;
    }

    function isArmstrong(uint num) internal pure returns (bool) {
        uint temp = num;
        uint sum = 0;
        uint digits = 0;

        // Count digits
        while (temp != 0) {
            digits++;
            temp /= 10;
        }

        temp = num;
        while (temp != 0) {
            uint digit = temp % 10;
            uint power = 1;
            for (uint i = 0; i < digits; i++) {
                power *= digit;
            }
            sum += power;
            temp /= 10;
        }

        return sum == num;
    }
}
