// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

library CalcLib {
    function add(int a, int b) internal pure returns (int) {
        return a + b;
    }

    function sub(int a, int b) internal pure returns (int) {
        return a - b;
    }

    function mul(int a, int b) internal pure returns (int) {
        return a * b;
    }

    function div(int a, int b) internal pure returns (int) {
        require(b != 0, "Division by zero");
        return a / b;
    }

    function mod(int a, int b) internal pure returns (int) {
        require(b != 0, "Modulo by zero");
        return a % b;
    }

    function sqrt(uint x) internal pure returns (uint) {
        if (x == 0) return 0;
        uint z = (x + 1) / 2;
        uint y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
        return y;
    }

    function abs(int x) internal pure returns (int) {
        return x >= 0 ? x : -x;
    }

    function power(int base, uint exp) internal pure returns (int) {
        int result = 1;
        for (uint i = 0; i < exp; i++) {
            result *= base;
        }
        return result;
    }
}


//contract
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./CalcLib.sol";

contract Calculator {
    using CalcLib for int;
    using CalcLib for uint;

    function getAddition(int a, int b) public pure returns (int) {
        return CalcLib.add(a, b);
    }

    function getSubtraction(int a, int b) public pure returns (int) {
        return CalcLib.sub(a, b);
    }

    function getMultiplication(int a, int b) public pure returns (int) {
        return CalcLib.mul(a, b);
    }

    function getDivision(int a, int b) public pure returns (int) {
        return CalcLib.div(a, b);
    }

    function getModulus(int a, int b) public pure returns (int) {
        return CalcLib.mod(a, b);
    }

    function getSqrt(uint a) public pure returns (uint) {
        return CalcLib.sqrt(a);
    }

    function getAbsolute(int a) public pure returns (int) {
        return CalcLib.abs(a);
    }

    function getPower(int base, uint exp) public pure returns (int) {
        return CalcLib.power(base, exp);
    }
}
