// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Abstract contract ThreeDObject
abstract contract ThreeDObject {
    function surfaceArea() public view virtual returns (uint256);
    function volume() public view virtual returns (uint256);
}

// Box contract inheriting ThreeDObject
contract Box is ThreeDObject {
    uint256 public length;
    uint256 public width;
    uint256 public height;

    constructor(uint256 _length, uint256 _width, uint256 _height) {
        length = _length;
        width = _width;
        height = _height;
    }

    function surfaceArea() public view override returns (uint256) {
        return 2 * (length * width + width * height + height * length);
    }

    function volume() public view override returns (uint256) {
        return length * width * height;
    }
}

// Cube contract inheriting ThreeDObject
contract Cube is ThreeDObject {
    uint256 public side;

    constructor(uint256 _side) {
        side = _side;
    }

    function surfaceArea() public view override returns (uint256) {
        return 6 * (side * side);
    }

    function volume() public view override returns (uint256) {
        return side * side * side;
    }
}

// Cylinder contract inheriting ThreeDObject
contract Cylinder is ThreeDObject {
    uint256 public radius;
    uint256 public height;

    uint256 constant PI = 3141592653589793; // Pi scaled by 10^15 for integer precision

    constructor(uint256 _radius, uint256 _height) {
        radius = _radius;
        height = _height;
    }

    function surfaceArea() public view override returns (uint256) {
        // PI scaled by 10^15
        uint256 radiusPlusHeight = radius + height;
        return (2 * PI * radius * radiusPlusHeight) / 1000000000000000; // Divide to scale back after calculations
    }

    function volume() public view override returns (uint256) {
        return (PI * radius * radius * height) / 1000000000000000; // Divide to scale back after calculations
    }
}

// Cone contract inheriting ThreeDObject
contract Cone is ThreeDObject {
    uint256 public radius;
    uint256 public height;

    uint256 constant PI = 3141592653589793; // Pi scaled by 10^15 for integer precision

    constructor(uint256 _radius, uint256 _height) {
        radius = _radius;
        height = _height;
    }

    function surfaceArea() public view override returns (uint256) {
        // PI scaled by 10^15
        uint256 radiusSquaredPlusHeightSquared = radius * radius + height * height;
        uint256 slantHeight = sqrt(radiusSquaredPlusHeightSquared);
        return (PI * radius * (radius + slantHeight)) / 1000000000000000; // Divide to scale back after calculations
    }

    function volume() public view override returns (uint256) {
        return (PI * radius * radius * height) / 3000000000000000; // Divide to scale back after calculations
    }

    // Approximate square root function for Solidity (not perfect)
    function sqrt(uint256 x) internal pure returns (uint256) {
        uint256 z = (x + 1) / 2;
        uint256 y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
        return y;
    }
}

// Driver contract to test ThreeDObject
contract MainContract {
    function printShapeDetails() public view returns (uint256, uint256) {
        Box box = new Box(3, 4, 5);
        Cube cube = new Cube(5);
        Cylinder cylinder = new Cylinder(3, 7);
        Cone cone = new Cone(3, 7);

        uint256 boxSurfaceArea = box.surfaceArea();
        uint256 cubeVolume = cube.volume();
        uint256 cylinderSurfaceArea = cylinder.surfaceArea();
        uint256 coneVolume = cone.volume();

        return (boxSurfaceArea, cubeVolume);
    }
}
